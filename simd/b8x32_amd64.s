// Code generated by command: go run gen_amd64.go -out D:/projects/quant1x/x/simd/b8x32_amd64.s -stubs D:/projects/quant1x/x/simd/b8x32_amd64.go -pkg simd. DO NOT EDIT.

#include "textflag.h"

// func b1x8_and(a []bool, b []bool, result []bool) int
// Requires: AVX
TEXT 路b1x8_and(SB), NOSPLIT, $0-80
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ result_base+48(FP), DX
	MOVQ a_len+8(FP), BX

loop:
	CMPQ    BX, $0x00000008
	JL      done
	VMOVUPS (AX), Y0
	VMOVUPS (CX), Y1
	VANDPS  Y1, Y0, Y0
	VMOVUPS Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000008, BX
	JMP     loop

done:
	MOVQ BX, ret+72(FP)
	VZEROUPPER
	RET

// func b1x8_or(a []bool, b []bool, result []bool) int
// Requires: AVX
TEXT 路b1x8_or(SB), NOSPLIT, $0-80
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ result_base+48(FP), DX
	MOVQ a_len+8(FP), BX

loop:
	CMPQ    BX, $0x00000008
	JL      done
	VMOVUPS (AX), Y0
	VMOVUPS (CX), Y1
	VORPS   Y1, Y0, Y0
	VMOVUPS Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000008, BX
	JMP     loop

done:
	MOVQ BX, ret+72(FP)
	VZEROUPPER
	RET

// func b1x8_xor(a []bool, b []bool, result []bool) int
// Requires: AVX
TEXT 路b1x8_xor(SB), NOSPLIT, $0-80
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ result_base+48(FP), DX
	MOVQ a_len+8(FP), BX

loop:
	CMPQ    BX, $0x00000008
	JL      done
	VMOVUPS (AX), Y0
	VMOVUPS (CX), Y1
	VXORPS  Y1, Y0, Y0
	VMOVUPS Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000008, BX
	JMP     loop

done:
	MOVQ BX, ret+72(FP)
	VZEROUPPER
	RET

// func b8x32_and(a []bool, b []bool, result []bool) int
// Requires: AVX, AVX2
TEXT 路b8x32_and(SB), NOSPLIT, $0-80
	MOVQ a_base+0(FP), AX
	MOVQ b_base+24(FP), CX
	MOVQ result_base+48(FP), DX
	MOVQ a_len+8(FP), BX

loop:
	CMPQ    BX, $0x00000020
	JL      done
	VMOVDQU (AX), Y0
	VMOVDQU (CX), Y1
	VPAND   Y1, Y0, Y0
	VMOVDQU Y0, (DX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	ADDQ    $0x00000020, DX
	SUBQ    $0x00000020, BX
	JMP     loop

done:
	MOVQ BX, ret+72(FP)
	VZEROUPPER
	RET
